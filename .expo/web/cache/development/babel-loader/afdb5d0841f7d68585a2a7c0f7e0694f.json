{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport Orientation from \"./orientation\";\nexport var UNLOCK = 'UNLOCK';\nexport var PORTRAIT = 'PORTRAIT';\nexport var LANDSCAPE = 'LANDSCAPE';\nexport var LANDSCAPE_LEFT = 'LANDSCAPE_LEFT';\nexport var LANDSCAPE_RIGHT = 'LANDSCAPE_RIGHT';\nexport var PORTRAIT_UPSIDE_DOWN = 'PORTRAIT_UPSIDE_DOWN';\nexport var ALL_ORIENTATIONS_BUT_UPSIDE_DOWN = 'ALL_ORIENTATIONS_BUT_UPSIDE_DOWN';\nvar stack = [];\nvar immediateId;\n\nfunction update() {\n  clearImmediate(immediateId);\n  immediateId = setImmediate(function () {\n    var orientation;\n    var length = stack.length;\n\n    while (!orientation && length--) {\n      orientation = stack[length].orientation;\n    }\n\n    switch (orientation) {\n      case UNLOCK:\n        Orientation.unlockAllOrientations();\n        break;\n\n      case PORTRAIT:\n        Orientation.lockToPortrait();\n        break;\n\n      case LANDSCAPE:\n        Orientation.lockToLandscape();\n        break;\n\n      case LANDSCAPE_LEFT:\n        Orientation.lockToLandscapeLeft();\n        break;\n\n      case LANDSCAPE_RIGHT:\n        Orientation.lockToLandscapeRight();\n        break;\n\n      case PORTRAIT_UPSIDE_DOWN:\n        Orientation.lockToPortraitUpsideDown();\n        break;\n\n      case ALL_ORIENTATIONS_BUT_UPSIDE_DOWN:\n        Orientation.lockToAllOrientationsButUpsideDown();\n        break;\n    }\n  });\n}\n\nexport function OrientationLocker(_ref) {\n  var orientation = _ref.orientation,\n      onChange = _ref.onChange,\n      onDeviceChange = _ref.onDeviceChange;\n  var stackEntry = useRef({});\n  useEffect(function () {\n    var current = stackEntry.current;\n    stack.push(current);\n    return function () {\n      var index = stack.indexOf(current);\n\n      if (index !== -1) {\n        stack.splice(index, 1);\n      }\n\n      update();\n    };\n  }, []);\n  useEffect(function () {\n    stackEntry.current.orientation = orientation;\n    update();\n  }, [orientation]);\n  useEffect(function () {\n    if (onChange) {\n      Orientation.addOrientationListener(onChange);\n      return function () {\n        return Orientation.removeOrientationListener(onChange);\n      };\n    }\n  }, [onChange]);\n  useEffect(function () {\n    if (onDeviceChange) {\n      Orientation.addDeviceOrientationListener(onDeviceChange);\n      return function () {\n        return Orientation.removeDeviceOrientationListener(onDeviceChange);\n      };\n    }\n  }, [onDeviceChange]);\n  return null;\n}","map":{"version":3,"sources":["C:/Users/aisla/visual_code_projects/eContractRh/node_modules/react-native-orientation-locker/src/OrientationLocker.js"],"names":["useEffect","useRef","Orientation","UNLOCK","PORTRAIT","LANDSCAPE","LANDSCAPE_LEFT","LANDSCAPE_RIGHT","PORTRAIT_UPSIDE_DOWN","ALL_ORIENTATIONS_BUT_UPSIDE_DOWN","stack","immediateId","update","clearImmediate","setImmediate","orientation","length","unlockAllOrientations","lockToPortrait","lockToLandscape","lockToLandscapeLeft","lockToLandscapeRight","lockToPortraitUpsideDown","lockToAllOrientationsButUpsideDown","OrientationLocker","onChange","onDeviceChange","stackEntry","current","push","index","indexOf","splice","addOrientationListener","removeOrientationListener","addDeviceOrientationListener","removeDeviceOrientationListener"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from 'react';\nimport Orientation from './orientation';\n\nexport const UNLOCK = 'UNLOCK';\nexport const PORTRAIT = 'PORTRAIT';\nexport const LANDSCAPE = 'LANDSCAPE';\nexport const LANDSCAPE_LEFT = 'LANDSCAPE_LEFT';\nexport const LANDSCAPE_RIGHT = 'LANDSCAPE_RIGHT';\nexport const PORTRAIT_UPSIDE_DOWN = 'PORTRAIT_UPSIDE_DOWN';\nexport const ALL_ORIENTATIONS_BUT_UPSIDE_DOWN = 'ALL_ORIENTATIONS_BUT_UPSIDE_DOWN';\n\nconst stack = [];\n\nlet immediateId;\n\nfunction update() {\n  clearImmediate(immediateId);\n  immediateId = setImmediate(() => {\n    let orientation;\n    let length = stack.length;\n    while (!orientation && length--) {\n      orientation = stack[length].orientation;\n    }\n\n    switch (orientation) {\n      case UNLOCK:\n        Orientation.unlockAllOrientations();\n        break;\n      case PORTRAIT:\n        Orientation.lockToPortrait();\n        break;\n      case LANDSCAPE:\n        Orientation.lockToLandscape();\n        break;\n      case LANDSCAPE_LEFT:\n        Orientation.lockToLandscapeLeft();\n        break;\n      case LANDSCAPE_RIGHT:\n        Orientation.lockToLandscapeRight();\n        break;\n      case PORTRAIT_UPSIDE_DOWN:\n        Orientation.lockToPortraitUpsideDown();\n        break;\n      case ALL_ORIENTATIONS_BUT_UPSIDE_DOWN:\n        Orientation.lockToAllOrientationsButUpsideDown();\n        break;\n    }\n  });\n}\n\nexport function OrientationLocker({\n  orientation,\n  onChange,\n  onDeviceChange,\n}) {\n  const stackEntry = useRef({});\n\n  // didMount: add to stack\n  useEffect(() => {\n    const { current } = stackEntry;\n    stack.push(current);\n\n    // willUnmount: remove from stack\n    return () => {\n      const index = stack.indexOf(current);\n      if (index !== -1) {\n        stack.splice(index, 1);\n      }\n      update();\n    };\n  }, []);\n\n  // props.orientation\n  useEffect(() => {\n    stackEntry.current.orientation = orientation;\n    update();\n  }, [orientation]);\n\n  // props.onChange\n  useEffect(() => {\n    if (onChange) {\n      Orientation.addOrientationListener(onChange);\n      return () => Orientation.removeOrientationListener(onChange);\n    }\n  }, [onChange]);\n\n  // props.onDeviceChange\n  useEffect(() => {\n    if (onDeviceChange) {\n      Orientation.addDeviceOrientationListener(onDeviceChange);\n      return () => Orientation.removeDeviceOrientationListener(onDeviceChange);\n    }\n  }, [onDeviceChange]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}